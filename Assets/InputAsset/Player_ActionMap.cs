//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.2
//     from Assets/InputAsset/Player_ActionMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @Player_ActionMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player_ActionMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player_ActionMap"",
    ""maps"": [
        {
            ""name"": ""PlayableInputStandalone"",
            ""id"": ""5d52c2ac-b416-4bc5-96d8-dbc5677f3c08"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""c6871b24-2fc3-49df-9e71-f558fcb525d3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""9eb91a37-8bc1-4126-809e-ae2f9977c8d0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""0dca63a5-1b8c-46ba-b620-f44fa32dcbf5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1f0b0918-4820-4e4d-b5c0-2604483f2a07"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d0176bf-b8f0-42b8-b58f-74b656eada39"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""c152f77b-f2fc-472c-8a45-1c760ff6be62"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""ecb2190a-b602-4a41-954b-42ff540f7227"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""eb694c3b-4337-41df-a16b-997d2f505861"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""dacf5d4c-2e70-4f26-be47-0933c9d701cc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""62c1771a-db24-432f-ae4b-a06861f07b2b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PlayableInputTouch"",
            ""id"": ""a552eddf-3e5d-4cb4-9bcd-7efb40d87ea3"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""3427ead7-e5f6-48d3-8df1-248c2528d321"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""a8813967-df4d-4ece-be50-6879c632f55d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look1"",
                    ""type"": ""Value"",
                    ""id"": ""68292156-6d32-41fb-983e-dfa6f3237d93"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look2"",
                    ""type"": ""Value"",
                    ""id"": ""b67768b2-9fcd-459c-a57f-63fe64eedb2d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SelectAction1"",
                    ""type"": ""PassThrough"",
                    ""id"": ""470eae0d-4d24-44c4-8d25-c65d13692ef2"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SelectAction2"",
                    ""type"": ""PassThrough"",
                    ""id"": ""08c8a535-674b-43e6-b4a1-2ec5c92af8b8"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SelectAction3"",
                    ""type"": ""PassThrough"",
                    ""id"": ""dc250328-1a1e-4546-8241-0779b1f8d22f"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dccb117a-e07c-495f-8ffe-a224189be25d"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9809674-07b6-40f8-9ef8-2ba130e80cfa"",
                    ""path"": ""<Touchscreen>/touch0/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Look1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e93069f4-1c5f-4ade-a3aa-d0c2f2075cc8"",
                    ""path"": ""<Touchscreen>/touch1/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard&Mouse"",
                    ""action"": ""Look2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""LeftStick"",
                    ""id"": ""e4dbed5b-4630-45e4-83bd-bc900f4fdb52"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""04402161-376c-419b-8fe5-e2537a43548a"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""197d18b3-9763-4599-a42b-19309f8ca7dc"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""931f6941-8a2a-473f-8fe8-59bfb0130fff"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""3aadb6a6-9e11-44a4-a991-7ddd38edcccc"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4d546bef-19c8-48c5-9239-16c082575dbd"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Touch"",
                    ""action"": ""SelectAction1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""004ef8a6-405e-48aa-afe4-a32de8537321"",
                    ""path"": ""<Touchscreen>/touch0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Touch"",
                    ""action"": ""SelectAction2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd5b7f27-f82a-4c49-8b6c-80f0ba4e14f5"",
                    ""path"": ""<Touchscreen>/touch1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Touch"",
                    ""action"": ""SelectAction3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""StrategyInputs"",
            ""id"": ""666f3fb3-daa2-4b32-8677-43b8bd95c558"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""a5bec731-260c-4092-b087-bde8677d84a9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Deselect"",
                    ""type"": ""Button"",
                    ""id"": ""322a3ab3-431d-40b4-86fe-54ed70aa083b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""213b0b53-4abc-4e5d-acf1-df66f6cadf19"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc5a364f-da02-456a-892c-56ff35dce7ae"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Deselect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayableInputStandalone
        m_PlayableInputStandalone = asset.FindActionMap("PlayableInputStandalone", throwIfNotFound: true);
        m_PlayableInputStandalone_Move = m_PlayableInputStandalone.FindAction("Move", throwIfNotFound: true);
        m_PlayableInputStandalone_Look = m_PlayableInputStandalone.FindAction("Look", throwIfNotFound: true);
        m_PlayableInputStandalone_Jump = m_PlayableInputStandalone.FindAction("Jump", throwIfNotFound: true);
        // PlayableInputTouch
        m_PlayableInputTouch = asset.FindActionMap("PlayableInputTouch", throwIfNotFound: true);
        m_PlayableInputTouch_Move = m_PlayableInputTouch.FindAction("Move", throwIfNotFound: true);
        m_PlayableInputTouch_Look = m_PlayableInputTouch.FindAction("Look", throwIfNotFound: true);
        m_PlayableInputTouch_Look1 = m_PlayableInputTouch.FindAction("Look1", throwIfNotFound: true);
        m_PlayableInputTouch_Look2 = m_PlayableInputTouch.FindAction("Look2", throwIfNotFound: true);
        m_PlayableInputTouch_SelectAction1 = m_PlayableInputTouch.FindAction("SelectAction1", throwIfNotFound: true);
        m_PlayableInputTouch_SelectAction2 = m_PlayableInputTouch.FindAction("SelectAction2", throwIfNotFound: true);
        m_PlayableInputTouch_SelectAction3 = m_PlayableInputTouch.FindAction("SelectAction3", throwIfNotFound: true);
        // StrategyInputs
        m_StrategyInputs = asset.FindActionMap("StrategyInputs", throwIfNotFound: true);
        m_StrategyInputs_Select = m_StrategyInputs.FindAction("Select", throwIfNotFound: true);
        m_StrategyInputs_Deselect = m_StrategyInputs.FindAction("Deselect", throwIfNotFound: true);
    }

    ~@Player_ActionMap()
    {
        Debug.Assert(!m_PlayableInputStandalone.enabled, "This will cause a leak and performance issues, Player_ActionMap.PlayableInputStandalone.Disable() has not been called.");
        Debug.Assert(!m_PlayableInputTouch.enabled, "This will cause a leak and performance issues, Player_ActionMap.PlayableInputTouch.Disable() has not been called.");
        Debug.Assert(!m_StrategyInputs.enabled, "This will cause a leak and performance issues, Player_ActionMap.StrategyInputs.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayableInputStandalone
    private readonly InputActionMap m_PlayableInputStandalone;
    private List<IPlayableInputStandaloneActions> m_PlayableInputStandaloneActionsCallbackInterfaces = new List<IPlayableInputStandaloneActions>();
    private readonly InputAction m_PlayableInputStandalone_Move;
    private readonly InputAction m_PlayableInputStandalone_Look;
    private readonly InputAction m_PlayableInputStandalone_Jump;
    public struct PlayableInputStandaloneActions
    {
        private @Player_ActionMap m_Wrapper;
        public PlayableInputStandaloneActions(@Player_ActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayableInputStandalone_Move;
        public InputAction @Look => m_Wrapper.m_PlayableInputStandalone_Look;
        public InputAction @Jump => m_Wrapper.m_PlayableInputStandalone_Jump;
        public InputActionMap Get() { return m_Wrapper.m_PlayableInputStandalone; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayableInputStandaloneActions set) { return set.Get(); }
        public void AddCallbacks(IPlayableInputStandaloneActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayableInputStandaloneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayableInputStandaloneActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IPlayableInputStandaloneActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IPlayableInputStandaloneActions instance)
        {
            if (m_Wrapper.m_PlayableInputStandaloneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayableInputStandaloneActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayableInputStandaloneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayableInputStandaloneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayableInputStandaloneActions @PlayableInputStandalone => new PlayableInputStandaloneActions(this);

    // PlayableInputTouch
    private readonly InputActionMap m_PlayableInputTouch;
    private List<IPlayableInputTouchActions> m_PlayableInputTouchActionsCallbackInterfaces = new List<IPlayableInputTouchActions>();
    private readonly InputAction m_PlayableInputTouch_Move;
    private readonly InputAction m_PlayableInputTouch_Look;
    private readonly InputAction m_PlayableInputTouch_Look1;
    private readonly InputAction m_PlayableInputTouch_Look2;
    private readonly InputAction m_PlayableInputTouch_SelectAction1;
    private readonly InputAction m_PlayableInputTouch_SelectAction2;
    private readonly InputAction m_PlayableInputTouch_SelectAction3;
    public struct PlayableInputTouchActions
    {
        private @Player_ActionMap m_Wrapper;
        public PlayableInputTouchActions(@Player_ActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayableInputTouch_Move;
        public InputAction @Look => m_Wrapper.m_PlayableInputTouch_Look;
        public InputAction @Look1 => m_Wrapper.m_PlayableInputTouch_Look1;
        public InputAction @Look2 => m_Wrapper.m_PlayableInputTouch_Look2;
        public InputAction @SelectAction1 => m_Wrapper.m_PlayableInputTouch_SelectAction1;
        public InputAction @SelectAction2 => m_Wrapper.m_PlayableInputTouch_SelectAction2;
        public InputAction @SelectAction3 => m_Wrapper.m_PlayableInputTouch_SelectAction3;
        public InputActionMap Get() { return m_Wrapper.m_PlayableInputTouch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayableInputTouchActions set) { return set.Get(); }
        public void AddCallbacks(IPlayableInputTouchActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayableInputTouchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayableInputTouchActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Look1.started += instance.OnLook1;
            @Look1.performed += instance.OnLook1;
            @Look1.canceled += instance.OnLook1;
            @Look2.started += instance.OnLook2;
            @Look2.performed += instance.OnLook2;
            @Look2.canceled += instance.OnLook2;
            @SelectAction1.started += instance.OnSelectAction1;
            @SelectAction1.performed += instance.OnSelectAction1;
            @SelectAction1.canceled += instance.OnSelectAction1;
            @SelectAction2.started += instance.OnSelectAction2;
            @SelectAction2.performed += instance.OnSelectAction2;
            @SelectAction2.canceled += instance.OnSelectAction2;
            @SelectAction3.started += instance.OnSelectAction3;
            @SelectAction3.performed += instance.OnSelectAction3;
            @SelectAction3.canceled += instance.OnSelectAction3;
        }

        private void UnregisterCallbacks(IPlayableInputTouchActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Look1.started -= instance.OnLook1;
            @Look1.performed -= instance.OnLook1;
            @Look1.canceled -= instance.OnLook1;
            @Look2.started -= instance.OnLook2;
            @Look2.performed -= instance.OnLook2;
            @Look2.canceled -= instance.OnLook2;
            @SelectAction1.started -= instance.OnSelectAction1;
            @SelectAction1.performed -= instance.OnSelectAction1;
            @SelectAction1.canceled -= instance.OnSelectAction1;
            @SelectAction2.started -= instance.OnSelectAction2;
            @SelectAction2.performed -= instance.OnSelectAction2;
            @SelectAction2.canceled -= instance.OnSelectAction2;
            @SelectAction3.started -= instance.OnSelectAction3;
            @SelectAction3.performed -= instance.OnSelectAction3;
            @SelectAction3.canceled -= instance.OnSelectAction3;
        }

        public void RemoveCallbacks(IPlayableInputTouchActions instance)
        {
            if (m_Wrapper.m_PlayableInputTouchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayableInputTouchActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayableInputTouchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayableInputTouchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayableInputTouchActions @PlayableInputTouch => new PlayableInputTouchActions(this);

    // StrategyInputs
    private readonly InputActionMap m_StrategyInputs;
    private List<IStrategyInputsActions> m_StrategyInputsActionsCallbackInterfaces = new List<IStrategyInputsActions>();
    private readonly InputAction m_StrategyInputs_Select;
    private readonly InputAction m_StrategyInputs_Deselect;
    public struct StrategyInputsActions
    {
        private @Player_ActionMap m_Wrapper;
        public StrategyInputsActions(@Player_ActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_StrategyInputs_Select;
        public InputAction @Deselect => m_Wrapper.m_StrategyInputs_Deselect;
        public InputActionMap Get() { return m_Wrapper.m_StrategyInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StrategyInputsActions set) { return set.Get(); }
        public void AddCallbacks(IStrategyInputsActions instance)
        {
            if (instance == null || m_Wrapper.m_StrategyInputsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StrategyInputsActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @Deselect.started += instance.OnDeselect;
            @Deselect.performed += instance.OnDeselect;
            @Deselect.canceled += instance.OnDeselect;
        }

        private void UnregisterCallbacks(IStrategyInputsActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @Deselect.started -= instance.OnDeselect;
            @Deselect.performed -= instance.OnDeselect;
            @Deselect.canceled -= instance.OnDeselect;
        }

        public void RemoveCallbacks(IStrategyInputsActions instance)
        {
            if (m_Wrapper.m_StrategyInputsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IStrategyInputsActions instance)
        {
            foreach (var item in m_Wrapper.m_StrategyInputsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StrategyInputsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public StrategyInputsActions @StrategyInputs => new StrategyInputsActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IPlayableInputStandaloneActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IPlayableInputTouchActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnLook1(InputAction.CallbackContext context);
        void OnLook2(InputAction.CallbackContext context);
        void OnSelectAction1(InputAction.CallbackContext context);
        void OnSelectAction2(InputAction.CallbackContext context);
        void OnSelectAction3(InputAction.CallbackContext context);
    }
    public interface IStrategyInputsActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnDeselect(InputAction.CallbackContext context);
    }
}
